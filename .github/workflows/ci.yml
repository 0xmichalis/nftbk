name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full clone to ensure git history is available

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-bin-${{ hashFiles('.github/workflows/ci.yml') }}

    - name: Check Format
      run: cargo fmt --all -- --check

    - name: Clippy
      run: cargo clippy --workspace --all-targets --all-features -- -D warnings

    - name: Check
      run: cargo check --verbose --workspace --frozen

    - name: Check cargo sort
      run: |
        if ! command -v cargo-sort > /dev/null; then
          cargo install cargo-sort
        fi
        cargo sort --check

    - name: Check SQLx cache
      run: |
        if ! command -v sqlx > /dev/null; then
          cargo install sqlx-cli
        fi
        cargo sqlx prepare --check

    - name: Install cargo-tarpaulin
      run: |
        if ! command -v cargo tarpaulin > /dev/null; then
          cargo install cargo-tarpaulin
        fi

    - name: Run tests with coverage
      run: |
        cargo tarpaulin \
          --workspace \
          --all-features \
          --ignore-tests \
          --engine llvm \
          --skip-clean \
          --timeout 120 \
          --out Lcov \
          --output-dir .

    - name: Upload coverage to Coveralls
      uses: coverallsapp/github-action@v2

  docker-publish:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build-test # Only run after successful build and test
    if: github.ref == 'refs/heads/main' # Only run on main branch

    permissions:
      packages: write # Required for GHCR push
      contents: read

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full clone to ensure git history is available

    - name: Log in to GHCR
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Build Docker image
      run: |
        IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/nftbk-server
        GIT_COMMIT=$(git rev-parse --short HEAD)
        docker build --build-arg GIT_COMMIT=$GIT_COMMIT -t $IMAGE_NAME:latest .

    - name: Push to GHCR
      run: |
        IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/nftbk-server
        docker push $IMAGE_NAME:latest
